#include "Lidarlib.h"
#include <iostream>
#include <algorithm>
#include <iomanip>
#include <unistd.h>
#include <chrono>

using namespace std;

// === SimpleSLAM Implementation ===

/**
 * @brief Constructor cho l·ªõp SimpleSLAM.
 * @param max_corr_dist Kho·∫£ng c√°ch t·ªëi ƒëa ƒë·ªÉ xem x√©t hai ƒëi·ªÉm l√† t∆∞∆°ng ·ª©ng trong ICP.
 * @param loop_threshold Ng∆∞·ª°ng kho·∫£ng c√°ch ƒë·ªÉ ph√°t hi·ªán m·ªôt v√≤ng l·∫∑p (loop closure).
 */
SimpleSLAM::SimpleSLAM(float max_corr_dist, float loop_threshold)
    : max_correspondence_distance(max_corr_dist), loop_closure_threshold(loop_threshold),
      next_node_id(0), current_pose(0, 0, 0, 0), last_pose(0, 0, 0, 0) {}

/**
 * @brief Th√™m m·ªôt scan m·ªõi v√†o h·ªá th·ªëng SLAM, c·∫≠p nh·∫≠t pose v√† pose graph.
 * @param scan_points Vector c√°c ƒëi·ªÉm 2D t·ª´ l·∫ßn qu√©t LiDAR m·ªõi nh·∫•t.
 * @param[out] estimated_pose Pose ƒë∆∞·ª£c ∆∞·ªõc t√≠nh c·ªßa robot sau khi x·ª≠ l√Ω scan.
 * @return true n·∫øu scan ƒë∆∞·ª£c th√™m th√†nh c√¥ng.
 */
bool SimpleSLAM::add_scan(const vector<Point2D>& scan_points, RobotPose& estimated_pose) {
    lock_guard<mutex> lock(slam_mutex);
    
    // L·∫•y timestamp t·ª´ pose hi·ªán t·∫°i ho·∫∑c scan
    long timestamp = 0;
    if (!pose_graph.empty()) timestamp = pose_graph.back()->pose.timestamp + 100; // Gi·∫£ ƒë·ªãnh 100ms m·ªói scan

    if (pose_graph.empty()) {
        // First scan - set initial pose
        estimated_pose = RobotPose(0, 0, 0, timestamp);
        current_pose = estimated_pose;
    } else {
        // Estimate pose using scan matching
        estimated_pose = estimate_pose_from_scan(scan_points);
        current_pose = estimated_pose;
        
        // Check for loop closure
        int loop_node = find_loop_closure(current_pose);
        if (loop_node >= 0) {
            cout << "[SLAM] üîÑ Loop closure detected with node " << loop_node << endl;
            // Simplified: adjust current pose based on loop closure
            auto& loop_pose = pose_graph[loop_node]->pose;
            current_pose.x = (current_pose.x + loop_pose.x) / 2.0f;
            current_pose.y = (current_pose.y + loop_pose.y) / 2.0f;
            estimated_pose = current_pose;
        }
    }
    
    // T·∫°o node m·ªõi trong pose graph
    auto new_node = make_shared<PoseGraphNode>(estimated_pose, scan_points, next_node_id++);
    
    // T√≠nh convex hull cho node n√†y
    vector<Point2D> local_points = scan_points; // T·∫°o b·∫£n sao ƒë·ªÉ t√≠nh to√°n
    new_node->convex_hull = compute_convex_hull(local_points);
    
    pose_graph.push_back(new_node);
    last_pose = current_pose;
    
    return true;
}

/**
 * @brief ∆Ø·ªõc t√≠nh pose c·ªßa robot t·ª´ scan hi·ªán t·∫°i d·ª±a tr√™n scan tr∆∞·ªõc ƒë√≥.
 * 
 * S·ª≠ d·ª•ng m·ªôt m√¥ h√¨nh chuy·ªÉn ƒë·ªông ƒë∆°n gi·∫£n k·∫øt h·ª£p v·ªõi ICP ƒë·ªÉ tinh ch·ªânh v·ªã tr√≠.
 * @param current_scan Vector c√°c ƒëi·ªÉm 2D c·ªßa l·∫ßn qu√©t hi·ªán t·∫°i.
 * @return Pose m·ªõi ƒë∆∞·ª£c ∆∞·ªõc t√≠nh c·ªßa robot.
 */
RobotPose SimpleSLAM::estimate_pose_from_scan(const vector<Point2D>& current_scan) {
    if (pose_graph.empty()) {
        return RobotPose(0, 0, 0, 0);
    }
    
    // Simplified odometry model - assume small movement
    float dx = 0.05f;  // 5cm forward per scan (example)
    float dy = 0.0f;
    float dtheta = 0.01f; // 0.01 radian rotation per scan
    
    // Simple motion model update
    RobotPose new_pose;
    new_pose.x = last_pose.x + dx * cos(last_pose.theta) - dy * sin(last_pose.theta);
    new_pose.y = last_pose.y + dx * sin(last_pose.theta) + dy * cos(last_pose.theta);
    new_pose.theta = last_pose.theta + dtheta;
    //new_pose.timestamp = current_scan.empty() ? 0 : current_scan[0].timestamp;
    
    // C·∫≠p nh·∫≠t timestamp
    if (!pose_graph.empty()) new_pose.timestamp = pose_graph.back()->pose.timestamp + 100;
    else new_pose.timestamp = 0;
    
    // Refined using simple ICP if we have previous scans
    if (pose_graph.size() > 1) {
        auto& last_scan = pose_graph.back()->scan_points;
        RobotPose icp_correction = simple_icp(current_scan, last_scan);
        
        // Apply correction
        new_pose.x += icp_correction.x * 0.3f; // Weight factor
        new_pose.y += icp_correction.y * 0.3f;
        new_pose.theta += icp_correction.theta * 0.3f;
    }
    
    return new_pose;
}

/**
 * @brief T√¨m ki·∫øm c√°c v√≤ng l·∫∑p (loop closures) trong pose graph.
 * 
 * So s√°nh pose hi·ªán t·∫°i v·ªõi c√°c pose c≈© trong graph ƒë·ªÉ t√¨m c√°c v·ªã tr√≠ ƒë√£ gh√© thƒÉm l·∫°i.
 * @param current_pose Pose hi·ªán t·∫°i c·ªßa robot.
 * @return ID c·ªßa node t·∫°o th√†nh v√≤ng l·∫∑p, ho·∫∑c -1 n·∫øu kh√¥ng t√¨m th·∫•y.
 */
int SimpleSLAM::find_loop_closure(const RobotPose& current_pose) {
    // B·ªè qua c√°c node g·∫ßn ƒë√¢y ƒë·ªÉ tr√°nh ph√°t hi·ªán sai
    if (pose_graph.size() < 10) return -1;

    for (size_t i = 0; i < pose_graph.size() - 10; i++) {
        if (pose_distance(current_pose, pose_graph[i]->pose) < loop_closure_threshold) {
            return i;
        }
    }
    return -1;
}

/**
 * @brief Chuy·ªÉn ƒë·ªïi m·ªôt t·∫≠p h·ª£p c√°c ƒëi·ªÉm t·ª´ h·ªá t·ªça ƒë·ªô c·ª•c b·ªô c·ªßa robot sang h·ªá t·ªça ƒë·ªô to√†n c·ª•c.
 * @param local_points Vector c√°c ƒëi·ªÉm trong h·ªá t·ªça ƒë·ªô c·ª•c b·ªô.
 * @param robot_pose Pose c·ªßa robot (v·ªã tr√≠ v√† h∆∞·ªõng) trong h·ªá t·ªça ƒë·ªô to√†n c·ª•c.
 * @return Vector c√°c ƒëi·ªÉm ƒë√£ ƒë∆∞·ª£c chuy·ªÉn ƒë·ªïi sang h·ªá t·ªça ƒë·ªô to√†n c·ª•c.
 */
vector<Point2D> SimpleSLAM::transform_points_to_global(const vector<Point2D>& local_points, 
                                                      const RobotPose& robot_pose) {
    vector<Point2D> global_points;
    global_points.reserve(local_points.size());
    
    for (const auto& point : local_points) {
        Point2D global_point = transform_point(point, robot_pose);
        global_points.push_back(global_point);
    }
    
    return global_points;
}

/**
 * @brief L·∫•y t·∫•t c·∫£ c√°c convex hull trong pose graph v√† chuy·ªÉn ƒë·ªïi ch√∫ng sang h·ªá t·ªça ƒë·ªô to√†n c·ª•c.
 * @return M·ªôt vector ch·ª©a c√°c convex hull, m·ªói hull l√† m·ªôt vector c√°c ƒëi·ªÉm to√†n c·ª•c.
 */
vector<vector<Point2D>> SimpleSLAM::get_all_global_hulls() const {
    lock_guard<mutex> lock(slam_mutex);
    vector<vector<Point2D>> all_hulls;
    
    for (const auto& node : pose_graph) {
        if (!node->convex_hull.empty()) {
            vector<Point2D> global_hull = transform_points_to_global(node->convex_hull, node->pose);
            all_hulls.push_back(global_hull);
        }
    }
    
    return all_hulls;
}

/**
 * @brief L·∫•y pose hi·ªán t·∫°i ƒë∆∞·ª£c ∆∞·ªõc t√≠nh c·ªßa robot.
 * @return Pose hi·ªán t·∫°i c·ªßa robot.
 */
RobotPose SimpleSLAM::get_current_pose() const {
    lock_guard<mutex> lock(slam_mutex);
    return current_pose;
}

/**
 * @brief L·∫•y to√†n b·ªô pose graph.
 * @return M·ªôt vector c√°c con tr·ªè chia s·∫ª ƒë·∫øn c√°c node trong graph.
 */
vector<shared_ptr<PoseGraphNode>> SimpleSLAM::get_pose_graph() const {
    lock_guard<mutex> lock(slam_mutex);
    return pose_graph;
}

/**
 * @brief (Private) Th·ª±c hi·ªán thu·∫≠t to√°n Iterative Closest Point (ICP) ƒë∆°n gi·∫£n.
 * 
 * ∆Ø·ªõc t√≠nh s·ª± d·ªãch chuy·ªÉn (translation) gi·ªØa hai ƒë√°m m√¢y ƒëi·ªÉm (source v√† target).
 * @param source ƒê√°m m√¢y ƒëi·ªÉm ngu·ªìn (scan hi·ªán t·∫°i).
 * @param target ƒê√°m m√¢y ƒëi·ªÉm m·ª•c ti√™u (scan tr∆∞·ªõc ƒë√≥).
 * @return M·ªôt RobotPose ch·ªâ ch·ª©a th√¥ng tin v·ªÅ s·ª± d·ªãch chuy·ªÉn (x, y) ƒë∆∞·ª£c ∆∞·ªõc t√≠nh.
 */
RobotPose SimpleSLAM::simple_icp(const vector<Point2D>& source, const vector<Point2D>& target) {
    // Simplified ICP - just find average displacement
    if (source.empty() || target.empty()) {
        return RobotPose(0, 0, 0, 0);
    }
    
    float sum_dx = 0, sum_dy = 0;
    int matches = 0;
    
    for (const auto& src_point : source) {
        //
        float min_dist_sq = 1e12; // Use squared distance for efficiency
        const Point2D* closest_target_ptr = nullptr;
        //
        for (const auto& tgt_point : target) {
            float dx = src_point.x - tgt_point.x;
            float dy = src_point.y - tgt_point.y;
            float dist_sq = dx*dx + dy*dy;
            
            if (dist_sq < min_dist_sq) {
                min_dist_sq = dist_sq;
                closest_target_ptr = &tgt_point;
            }
        }
        
        if (closest_target_ptr && min_dist_sq < (max_correspondence_distance * max_correspondence_distance)) {
            sum_dx += closest_target_ptr->x - src_point.x;
            sum_dy += closest_target_ptr->y - src_point.y;
            matches++;
        }
    }
    
    if (matches > 5) { // Require a minimum number of matches
        return RobotPose(sum_dx / matches, sum_dy / matches, 0, 0);
    }
    
    return RobotPose(0, 0, 0, 0);
}

/**
 * @brief (Private) T√≠nh kho·∫£ng c√°ch Euclide gi·ªØa hai pose (ch·ªâ x√©t x, y).
 * @param p1 Pose th·ª© nh·∫•t.
 * @param p2 Pose th·ª© hai.
 * @return Kho·∫£ng c√°ch gi·ªØa hai pose.
 */
float SimpleSLAM::pose_distance(const RobotPose& p1, const RobotPose& p2) {
    float dx = p1.x - p2.x;
    float dy = p1.y - p2.y;
    return sqrt(dx*dx + dy*dy);
}

/**
 * @brief (Private) Chuy·ªÉn ƒë·ªïi m·ªôt ƒëi·ªÉm t·ª´ h·ªá t·ªça ƒë·ªô c·ª•c b·ªô sang to√†n c·ª•c.
 * @param point ƒêi·ªÉm trong h·ªá t·ªça ƒë·ªô c·ª•c b·ªô.
 * @param pose Pose c·ªßa robot trong h·ªá t·ªça ƒë·ªô to√†n c·ª•c.
 * @return ƒêi·ªÉm ƒë√£ ƒë∆∞·ª£c chuy·ªÉn ƒë·ªïi.
 */
Point2D SimpleSLAM::transform_point(const Point2D& point, const RobotPose& pose) {
    float cos_theta = cos(pose.theta);
    float sin_theta = sin(pose.theta);
    
    float global_x = pose.x + point.x * cos_theta - point.y * sin_theta;
    float global_y = pose.y + point.x * sin_theta + point.y * cos_theta;
    
    return Point2D(global_x, global_y, point.distance);
}

/**
 * @brief (Private) T√≠nh t√≠ch c√≥ h∆∞·ªõng (cross product) c·ªßa 3 ƒëi·ªÉm.
 * @param O ƒêi·ªÉm g·ªëc.
 * @param A ƒêi·ªÉm th·ª© nh·∫•t.
 * @param B ƒêi·ªÉm th·ª© hai.
 * @return > 0 cho r·∫Ω tr√°i, < 0 cho r·∫Ω ph·∫£i, = 0 n·∫øu th·∫≥ng h√†ng.
 */
float SimpleSLAM::cross_product(const Point2D& O, const Point2D& A, const Point2D& B) {
    return (A.x - O.x) * (B.y - O.y) - (A.y - O.y) * (B.x - O.x);
}

/**
 * @brief (Private) T√≠nh to√°n convex hull c·ªßa m·ªôt t·∫≠p h·ª£p c√°c ƒëi·ªÉm b·∫±ng thu·∫≠t to√°n Andrew's monotone chain.
 * @param points M·ªôt vector c√°c ƒëi·ªÉm Point2D.
 * @return Convex hull d∆∞·ªõi d·∫°ng m·ªôt vector c√°c ƒëi·ªÉm Point2D.
 */
vector<Point2D> SimpleSLAM::compute_convex_hull(vector<Point2D> points) {
    if (points.size() <= 1) return points;
    
    sort(points.begin(), points.end());
    points.erase(unique(points.begin(), points.end()), points.end());
    
    if (points.size() <= 1) return points;
    
    vector<Point2D> hull;
    
    // Lower hull
    for (const auto& p : points) {
        while (hull.size() >= 2 && 
               cross_product(hull[hull.size()-2], hull[hull.size()-1], p) <= 0) {
            hull.pop_back();
        }
        hull.push_back(p);
    }
    
    // Upper hull
    int lower_size = hull.size();
    for (int i = points.size() - 2; i >= 0; i--) {
        const auto& p = points[i];
        while (hull.size() > lower_size && 
               cross_product(hull[hull.size()-2], hull[hull.size()-1], p) <= 0) {
            hull.pop_back();
        }
        hull.push_back(p);
    }
    
    if (hull.size() > 1) hull.pop_back();
    return hull;
}

// === SlamConvexHullManager Implementation ===

/**
 * @brief Constructor cho l·ªõp SlamConvexHullManager.
 * @param history_size S·ªë l∆∞·ª£ng hull t·ªëi ƒëa ƒë·ªÉ l∆∞u trong l·ªãch s·ª≠.
 * @param threshold Ng∆∞·ª°ng ch√™nh l·ªách ƒë·ªÉ x√°c ƒë·ªãnh hull l√† ·ªïn ƒë·ªãnh.
 */
SlamConvexHullManager::SlamConvexHullManager(int history_size, float threshold)
    : max_history_size(history_size), stability_threshold(threshold), 
      is_stable(false), stable_count(0) {}

/**
 * @brief C·∫≠p nh·∫≠t v·ªõi m·ªôt convex hull m·ªõi v√† pose c·ªßa robot, ki·ªÉm tra t√≠nh ·ªïn ƒë·ªãnh.
 * @param new_hull Convex hull m·ªõi trong h·ªá t·ªça ƒë·ªô c·ª•c b·ªô.
 * @param robot_pose Pose hi·ªán t·∫°i c·ªßa robot.
 * @return true n·∫øu hull v·ª´a tr·ªü n√™n ·ªïn ƒë·ªãnh.
 */
bool SlamConvexHullManager::update(const vector<Point2D>& new_hull, const RobotPose& robot_pose) {
    lock_guard<mutex> lock(hull_mutex);
    
    hull_history.push_back(new_hull);
    
    if (hull_history.size() > (size_t)max_history_size) {
        hull_history.pop_front();
    }
    
    if (hull_history.size() < 3) {
        is_stable = false;
        return false;
    }
    
    vector<Point2D> avg_hull = compute_average_hull();
    
    if (is_hull_stable_internal(avg_hull)) {
        stable_count++;
        if (stable_count >= 3) {
            stable_hull = avg_hull;
            
            // Transform to global coordinate
            global_hull = transform_hull_to_global(stable_hull, robot_pose);
            
            is_stable = true;
            return true;
        }
    } else {
        stable_count = 0;
        is_stable = false;
    }
    
    return false;
}

/**
 * @brief L·∫•y convex hull ·ªïn ƒë·ªãnh g·∫ßn nh·∫•t trong h·ªá t·ªça ƒë·ªô c·ª•c b·ªô.
 * @return Vector c√°c ƒëi·ªÉm 2D t·∫°o th√†nh hull ·ªïn ƒë·ªãnh c·ª•c b·ªô.
 */
vector<Point2D> SlamConvexHullManager::get_stable_hull() const {
    lock_guard<mutex> lock(hull_mutex);
    return stable_hull;
}

/**
 * @brief L·∫•y convex hull ·ªïn ƒë·ªãnh g·∫ßn nh·∫•t trong h·ªá t·ªça ƒë·ªô to√†n c·ª•c.
 * @return Vector c√°c ƒëi·ªÉm 2D t·∫°o th√†nh hull ·ªïn ƒë·ªãnh to√†n c·ª•c.
 */
vector<Point2D> SlamConvexHullManager::get_global_hull() const {
    lock_guard<mutex> lock(hull_mutex);
    return global_hull;
}

/**
 * @brief Ki·ªÉm tra xem hull hi·ªán t·∫°i c√≥ ƒë∆∞·ª£c coi l√† ·ªïn ƒë·ªãnh hay kh√¥ng.
 * @return true n·∫øu hull ·ªïn ƒë·ªãnh.
 */
bool SlamConvexHullManager::is_hull_stable() const {
    lock_guard<mutex> lock(hull_mutex);
    return is_stable;
}

/**
 * @brief (Private) T√≠nh to√°n m·ªôt "hull trung b√¨nh" t·ª´ l·ªãch s·ª≠ c√°c hull.
 * @return M·ªôt convex hull m·ªõi ƒë∆∞·ª£c t√≠nh t·ª´ t·∫•t c·∫£ c√°c ƒëi·ªÉm trong l·ªãch s·ª≠.
 */
vector<Point2D> SlamConvexHullManager::compute_average_hull() {
    if (hull_history.empty()) return {};
    
    vector<Point2D> all_points;
    for (const auto& hull : hull_history) {
        all_points.insert(all_points.end(), hull.begin(), hull.end());
    }
    
    return compute_convex_hull(all_points);
}

/**
 * @brief (Private) Ki·ªÉm tra n·ªôi b·ªô xem m·ªôt hull m·ªõi c√≥ ·ªïn ƒë·ªãnh so v·ªõi hull ·ªïn ƒë·ªãnh hi·ªán t·∫°i kh√¥ng.
 * @param new_hull Hull ·ª©ng c·ª≠ vi√™n ƒë·ªÉ ki·ªÉm tra.
 * @return true n·∫øu ch√™nh l·ªách n·∫±m trong ng∆∞·ª°ng cho ph√©p.
 */
bool SlamConvexHullManager::is_hull_stable_internal(const vector<Point2D>& new_hull) {
    if (stable_hull.empty()) return true;
    if (new_hull.size() != stable_hull.size()) return false;
    
    float total_diff = 0.0f;
    for (size_t i = 0; i < new_hull.size(); i++) {
        float dx = new_hull[i].x - stable_hull[i].x;
        float dy = new_hull[i].y - stable_hull[i].y;
        total_diff += sqrt(dx*dx + dy*dy);
    }
    
    if (new_hull.empty()) return true; // Avoid division by zero
    float avg_diff = total_diff / new_hull.size();
    return avg_diff < stability_threshold;
}

/**
 * @brief (Private) T√≠nh to√°n convex hull c·ªßa m·ªôt t·∫≠p h·ª£p c√°c ƒëi·ªÉm.
 * @param points Vector c√°c ƒëi·ªÉm ƒë·∫ßu v√†o.
 * @return Vector c√°c ƒëi·ªÉm t·∫°o th√†nh convex hull.
 */
vector<Point2D> SlamConvexHullManager::compute_convex_hull(vector<Point2D> points) {
    if (points.size() <= 1) return points;
    
    sort(points.begin(), points.end());
    points.erase(unique(points.begin(), points.end()), points.end());
    
    if (points.size() <= 1) return points;
    
    vector<Point2D> hull;
    
    // Lower hull
    for (const auto& p : points) {
        while (hull.size() >= 2 && 
               cross_product(hull[hull.size()-2], hull[hull.size()-1], p) <= 0) {
            hull.pop_back();
        }
        hull.push_back(p);
    }
    
    // Upper hull
    int lower_size = hull.size();
    for (int i = points.size() - 2; i >= 0; i--) {
        const auto& p = points[i];
        while (hull.size() > lower_size && 
               cross_product(hull[hull.size()-2], hull[hull.size()-1], p) <= 0) {
            hull.pop_back();
        }
        hull.push_back(p);
    }
    
    if (hull.size() > 1) hull.pop_back();
    return hull;
}

/**
 * @brief (Private) T√≠nh t√≠ch c√≥ h∆∞·ªõng (cross product) c·ªßa 3 ƒëi·ªÉm.
 * @param O ƒêi·ªÉm g·ªëc.
 * @param A ƒêi·ªÉm th·ª© nh·∫•t.
 * @param B ƒêi·ªÉm th·ª© hai.
 * @return Gi√° tr·ªã > 0 cho r·∫Ω tr√°i, < 0 cho r·∫Ω ph·∫£i, v√† = 0 n·∫øu th·∫≥ng h√†ng.
 */
float SlamConvexHullManager::cross_product(const Point2D& O, const Point2D& A, const Point2D& B) {
    return (A.x - O.x) * (B.y - O.y) - (A.y - O.y) * (B.x - O.x);
}

/**
 * @brief (Private) Chuy·ªÉn ƒë·ªïi m·ªôt hull t·ª´ t·ªça ƒë·ªô c·ª•c b·ªô sang t·ªça ƒë·ªô to√†n c·ª•c.
 * @param local_hull Hull trong t·ªça ƒë·ªô c·ª•c b·ªô.
 * @param robot_pose Pose c·ªßa robot.
 * @return Hull trong t·ªça ƒë·ªô to√†n c·ª•c.
 */
vector<Point2D> SlamConvexHullManager::transform_hull_to_global(const vector<Point2D>& local_hull, 
                                                                const RobotPose& robot_pose) {
    vector<Point2D> global_hull_points;
    global_hull_points.reserve(local_hull.size());
    float cos_theta = cos(robot_pose.theta);
    float sin_theta = sin(robot_pose.theta);

    for (const auto& point : local_hull) {
        float global_x = robot_pose.x + point.x * cos_theta - point.y * sin_theta;
        float global_y = robot_pose.y + point.x * sin_theta + point.y * cos_theta;
        global_hull_points.emplace_back(global_x, global_y, point.distance);
    }
    return global_hull_points;
}

// === LidarProcessor Implementation ===

/**
 * @brief Constructor cho LidarProcessor.
 * @param local_ip ƒê·ªãa ch·ªâ IP c·ª•c b·ªô ƒë·ªÉ l·∫Øng nghe.
 * @param local_port C·ªïng c·ª•c b·ªô ƒë·ªÉ l·∫Øng nghe.
 * @param laser_ip ƒê·ªãa ch·ªâ IP c·ªßa c·∫£m bi·∫øn LiDAR.
 * @param laser_port C·ªïng c·ªßa c·∫£m bi·∫øn LiDAR.
 */
LidarProcessor::LidarProcessor(const string& local_ip, const string& local_port,
                                       const string& laser_ip, const string& laser_port)
    : local_ip(local_ip), local_port(local_port), laser_ip(laser_ip), laser_port(laser_port),
      is_running(false), is_processing(false), scan_count(0), valid_hulls_count(0), 
      loop_closures_count(0) {
    
    hull_manager = make_unique<SlamConvexHullManager>(8, 0.15f);
    slam_system = make_unique<SimpleSLAM>(2.0f, 1.5f);
}

/**
 * @brief Destructor cho LidarProcessor.
 */
LidarProcessor::~LidarProcessor() {
    stop_processing();
}

/**
 * @brief Kh·ªüi t·∫°o k·∫øt n·ªëi UDP ƒë·∫øn LiDAR.
 * @return true n·∫øu kh·ªüi t·∫°o th√†nh c√¥ng.
 */
bool LidarProcessor::initialize() {
    try {
        cout << "[SLAM-LIDAR] Kh·ªüi t·∫°o SLAM LiDAR system..." << endl;
        lidar = make_unique<LakiBeamUDP>(local_ip, local_port, laser_ip, laser_port);
        cout << "[SLAM-LIDAR] ‚úÖ Kh·ªüi t·∫°o th√†nh c√¥ng!" << endl;
        return true;
    } catch (const exception& e) {
        cout << "[SLAM-LIDAR] ‚ùå L·ªói kh·ªüi t·∫°o: " << e.what() << endl;
        return false;
    }
}

/**
 * @brief B·∫Øt ƒë·∫ßu v√≤ng l·∫∑p x·ª≠ l√Ω d·ªØ li·ªáu LiDAR trong m·ªôt lu·ªìng ri√™ng.
 * @return true n·∫øu c√≥ th·ªÉ b·∫Øt ƒë·∫ßu.
 */
bool LidarProcessor::start_processing() {
    if (!lidar) {
        cout << "[SLAM-LIDAR] ‚ùå LiDAR ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o!" << endl;
        return false;
    }
    
    is_running = true;
    is_processing = true;
    cout << "[SLAM-LIDAR] üöÄ B·∫Øt ƒë·∫ßu SLAM processing..." << endl;
    return true;
}

/**
 * @brief D·ª´ng v√≤ng l·∫∑p x·ª≠ l√Ω d·ªØ li·ªáu LiDAR.
 */
void LidarProcessor::stop_processing() {
    is_running = false;
    is_processing = false;
    cout << "[SLAM-LIDAR] ‚èπÔ∏è D·ª´ng SLAM processing." << endl;
}

/**
 * @brief ƒêƒÉng k√Ω m·ªôt h√†m callback ƒë·ªÉ nh·∫≠n convex hull ·ªïn ƒë·ªãnh v√† pose.
 * @param callback H√†m callback c√≥ d·∫°ng `void(const vector<Point2D>&, const RobotPose&)`.
 */
void LidarProcessor::set_hull_callback(function<void(const vector<Point2D>&, const RobotPose&)> callback) {
    hull_callback = callback;
}

/**
 * @brief ƒêƒÉng k√Ω m·ªôt h√†m callback ƒë·ªÉ nh·∫≠n b·∫£n ƒë·ªì (t·∫≠p h·ª£p c√°c hull to√†n c·ª•c).
 * @param callback H√†m callback c√≥ d·∫°ng `void(const vector<vector<Point2D>>&)`.
 */
void LidarProcessor::set_map_callback(function<void(const vector<vector<Point2D>>&)> callback) {
    map_callback = callback;
}

/**
 * @brief L·∫•y convex hull ·ªïn ƒë·ªãnh hi·ªán t·∫°i trong t·ªça ƒë·ªô c·ª•c b·ªô.
 * @return Vector c√°c ƒëi·ªÉm c·ªßa hull ·ªïn ƒë·ªãnh c·ª•c b·ªô.
 */
vector<Point2D> LidarProcessor::get_current_stable_hull() const {
    if (hull_manager) {
        return hull_manager->get_stable_hull();
    }
    return {};
}

/**
 * @brief L·∫•y convex hull ·ªïn ƒë·ªãnh hi·ªán t·∫°i trong t·ªça ƒë·ªô to√†n c·ª•c.
 * @return Vector c√°c ƒëi·ªÉm c·ªßa hull ·ªïn ƒë·ªãnh to√†n c·ª•c.
 */
vector<Point2D> LidarProcessor::get_global_hull() const {
    if (hull_manager) {
        return hull_manager->get_global_hull();
    }
    return {};
}

/**
 * @brief L·∫•y pose hi·ªán t·∫°i c·ªßa robot.
 * @return Pose hi·ªán t·∫°i c·ªßa robot.
 */
RobotPose LidarProcessor::get_current_pose() const {
    lock_guard<mutex> lock(pose_mutex);
    return current_robot_pose;
}

/**
 * @brief L·∫•y t·∫•t c·∫£ c√°c hull ƒë√£ ƒë∆∞·ª£c √°nh x·∫° trong t·ªça ƒë·ªô to√†n c·ª•c.
 * @return Vector ch·ª©a c√°c hull to√†n c·ª•c.
 */
vector<vector<Point2D>> LidarProcessor::get_mapped_hulls() const {
    if (slam_system) {
        return slam_system->get_all_global_hulls();
    }
    return {};
}

/**
 * @brief Ki·ªÉm tra xem k·∫øt n·ªëi LiDAR ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o ch∆∞a.
 * @return true n·∫øu ƒë√£ k·∫øt n·ªëi.
 */
bool LidarProcessor::is_lidar_connected() const {
    return lidar != nullptr;
}

/**
 * @brief Ki·ªÉm tra xem convex hull c√≥ ƒëang ·ªü tr·∫°ng th√°i ·ªïn ƒë·ªãnh kh√¥ng.
 * @return true n·∫øu ·ªïn ƒë·ªãnh.
 */
bool LidarProcessor::is_hull_stable() const {
    if (hull_manager) {
        return hull_manager->is_hull_stable();
    }
    return false;
}

/**
 * @brief Ki·ªÉm tra xem h·ªá th·ªëng SLAM c√≥ ƒëang ho·∫°t ƒë·ªông kh√¥ng.
 * @return true n·∫øu ƒëang x·ª≠ l√Ω.
 */
bool LidarProcessor::is_slam_active() const {
    return is_processing.load();
}

/**
 * @brief C·∫≠p nh·∫≠t th·ªß c√¥ng pose c·ªßa robot (v√≠ d·ª• t·ª´ odometry).
 * @param new_pose Pose m·ªõi c·ªßa robot.
 */
void LidarProcessor::update_robot_pose(const RobotPose& new_pose) {
    lock_guard<mutex> lock(pose_mutex);
    current_robot_pose = new_pose;
}

/**
 * @brief (Private) L·∫•y timestamp hi·ªán t·∫°i d∆∞·ªõi d·∫°ng milliseconds.
 * @return Timestamp hi·ªán t·∫°i.
 */
long LidarProcessor::get_current_timestamp() const {
    auto now = chrono::system_clock::now();
    return chrono::duration_cast<chrono::milliseconds>(now.time_since_epoch()).count();
}

/**
 * @brief V√≤ng l·∫∑p ch√≠nh x·ª≠ l√Ω d·ªØ li·ªáu LiDAR v√† SLAM.
 * 
 * H√†m n√†y ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·ªÉ ch·∫°y trong m·ªôt lu·ªìng ri√™ng bi·ªát.
 */
void LidarProcessor::process_slam_lidar_data() {
    if (!lidar || !is_running) {
        cout << "[SLAM-LIDAR] ‚ùå Kh√¥ng th·ªÉ b·∫Øt ƒë·∫ßu - h·ªá th·ªëng ch∆∞a s·∫µn s√†ng" << endl;
        return;
    }
    
    cout << "[SLAM-LIDAR] üó∫Ô∏è SLAM LiDAR thread ƒë√£ b·∫Øt ƒë·∫ßu..." << endl;
    
    // Bi·∫øn global_running c·∫ßn ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a ·ªü ƒë√¢u ƒë√≥ trong ch∆∞∆°ng tr√¨nh ch√≠nh
    // ƒë·ªÉ c√≥ th·ªÉ d·ª´ng t·∫•t c·∫£ c√°c lu·ªìng m·ªôt c√°ch an to√†n.
    extern volatile bool global_running; 
    
    while (is_running && global_running) {
        repark_t scan_data;
        
        if (lidar->get_repackedpack(scan_data)) {
            process_single_scan_with_slam(scan_data);
        } else {
            usleep(1000); // 1ms sleep to prevent busy-waiting
        }
    }
    
    is_processing = false;
    print_slam_status();
    cout << "[SLAM-LIDAR] üèÅ SLAM LiDAR thread ƒë√£ k·∫øt th√∫c." << endl;
}

/**
 * @brief (Private) X·ª≠ l√Ω m·ªôt g√≥i d·ªØ li·ªáu scan t·ª´ LiDAR v·ªõi SLAM.
 * @param pack G√≥i d·ªØ li·ªáu th√¥ `repark_t` t·ª´ LiDAR.
 */
void LidarProcessor::process_single_scan_with_slam(const repark_t& pack) {
    if (pack.maxdots == 0) return;
    
    scan_count++;
    
    // Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu LiDAR th√†nh ƒëi·ªÉm 2D v·ªõi timestamp
    vector<Point2D> points = convert_lidar_to_points(pack);
    if (points.empty()) return;

    // C·∫≠p nh·∫≠t pose v√† th√™m scan m·ªõi v√†o SLAM
    RobotPose estimated_pose;
    if (slam_system->add_scan(points, estimated_pose)) {
        lock_guard<mutex> lock(pose_mutex);
        current_robot_pose = estimated_pose;
    }

    // C·∫≠p nh·∫≠t hull manager
    if (hull_manager->update(points, get_current_pose())) {
        valid_hulls_count++;
        // G·ªçi callback n·∫øu c√≥ hull ·ªïn ƒë·ªãnh m·ªõi
        if (hull_callback) {
            hull_callback(hull_manager->get_global_hull(), get_current_pose());
        }
    }

    // G·ªçi callback map m·ªói 10 scan
    if (scan_count % 10 == 0 && map_callback) {
        map_callback(get_mapped_hulls());
    }
}

/**
 * @brief (Private) Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu th√¥ t·ª´ LiDAR th√†nh m·ªôt vector c√°c ƒëi·ªÉm 2D.
 * @param pack G√≥i d·ªØ li·ªáu th√¥ `repark_t` t·ª´ LiDAR.
 * @return M·ªôt vector c√°c ƒëi·ªÉm `Point2D`.
 */
vector<Point2D> LidarProcessor::convert_lidar_to_points(const repark_t& pack) {
    vector<Point2D> points;
    points.reserve(pack.maxdots);

    for (u16_t i = 0; i < pack.maxdots; i++) {
        const auto& point = pack.dotcloud[i];
        
        // L·ªçc nhi·ªÖu v√† c√°c ƒëi·ªÉm kh√¥ng h·ª£p l·ªá
        if (point.distance > 10 && point.distance < 50000) { // 1cm to 50m
            float angle_deg = angle_to_degrees(point.angle);
            float distance_m = distance_to_meters(point.distance);
            
            float angle_rad = angle_deg * M_PI / 180.0f;
            float x = distance_m * cos(angle_rad);
            float y = distance_m * sin(angle_rad);
            
            points.emplace_back(x, y, distance_m);
        }
    }
    return points;
}

/**
 * @brief (Private) In ra tr·∫°ng th√°i hi·ªán t·∫°i c·ªßa h·ªá th·ªëng SLAM.
 */
void LidarProcessor::print_slam_status() const {
    cout << "\n--- SLAM Status Summary ---" << endl;
    cout << "Total Scans Processed: " << get_scan_count() << endl;
    cout << "Valid Stable Hulls Found: " << get_valid_hulls_count() << endl;
    cout << "Loop Closures Detected: " << get_loop_closures_count() << endl;
    if (slam_system) {
        RobotPose p = get_current_pose();
        cout << "Final Pose (x, y, theta): (" 
             << fixed << setprecision(2) << p.x << ", " << p.y << ", " << p.theta 
             << ")" << endl;
    }
    cout << "---------------------------\n" << endl;
}
